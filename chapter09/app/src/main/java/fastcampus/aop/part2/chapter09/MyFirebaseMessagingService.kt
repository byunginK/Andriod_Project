package fastcampus.aop.part2.chapter09

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.widget.RemoteViews
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import com.google.firebase.messaging.FirebaseMessagingService
import com.google.firebase.messaging.RemoteMessage

class MyFirebaseMessagingService : FirebaseMessagingService() {

    //ÌÜ†ÌÅ∞Ïù¥ Í∞±Ïã†Îê†ÎïåÎßàÎã§ ÏÑúÎ≤ÑÏóê Ìï¥Îãπ ÌÜ†ÌÅ∞ÏùÑ ÏóÖÎç∞Ïù¥Ìä∏ Ìï¥Ï£ºÏñ¥Ïïº ÌïúÎã§.
    //(ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏Îäî ÏÇ¨Ïö© ÏïàÌï®)
    override fun onNewToken(p0: String) {
        super.onNewToken(p0)
    }

    //Î©îÏÑ∏ÏßÄÎ•º Î∞õÎäî Î∂ÄÎ∂Ñ
    override fun onMessageReceived(remoteMessage: RemoteMessage) {
        super.onMessageReceived(remoteMessage)

        createNotificationChannel()

        val type = remoteMessage.data["type"]?.let {
            NotificationType.valueOf(it)
        }
        val title = remoteMessage.data["title"] //fireBaseÏóêÏÑú Ï†úÎ™©ÏúºÎ°ú ÎÑòÍ∏¥Í±∏ Î∞õÏùå
        val message = remoteMessage.data["message"] // fireBaseÏóêÏÑú Î©îÏãúÏßÄ

        type ?: return



        NotificationManagerCompat.from(this)
            .notify(type.id, createNotification(type, title, message))
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                CHANNEL_ID,
                CHANNEL_NAME,
                NotificationManager.IMPORTANCE_DEFAULT
            )
            channel.description = CHANNEL_DESCRIPTION

            (getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager)
                .createNotificationChannel(channel)
        }
    }

    private fun createNotification(
        type: NotificationType,
        title: String?,
        message: String?
    ): Notification {
        val intent = Intent(this, MainActivity::class.java).apply {
            putExtra("notificationType", "${type.title} ÌÉÄÏûÖ")
            //Í∏∞Ï°¥ÌôîÎ©¥ÏùÑ Í∞±Ïã†ÌïòÎäî flag (ÏûëÏóÖ Î∞è Ïä§ÌÉù)
            addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP)
        }

        //PendingIntent Ïù∏ÌÖêÌä∏Î•º Îã§Î£∞Ïàò ÏûàÎäî Í∂åÌïúÏùÑ Ï§ÄÎã§.
        val pendingIntent = PendingIntent.getActivity(this, type.id, intent, PendingIntent.FLAG_UPDATE_CURRENT)

        val notifiactionBuilder = NotificationCompat.Builder(this, CHANNEL_ID) // context, id
            .setSmallIcon(R.drawable.ic_notification) // ÏïåÎ¶º ÏïÑÏù¥ÏΩò
            .setContentTitle(title) // ÏïåÎ¶º Ï†úÎ™©
            .setContentText(message) // ÏïåÎ¶º ÎÇ¥Ïö©
            .setPriority(NotificationCompat.PRIORITY_DEFAULT) // ÏïåÎ¶º Ï§ëÏöîÎèÑ
            .setContentIntent(pendingIntent)
            .setAutoCancel(true) //ÌÅ¥Î¶≠Ïãú ÏûêÎèôÏúºÎ°ú Îã´ÏïÑÏ§å


        when (type) {
            NotificationType.NORMAL -> Unit
            NotificationType.EXPANDABLE -> {
                notifiactionBuilder.setStyle(
                    NotificationCompat.BigTextStyle()
                        .bigText(
                            "üòÄ üòÉ üòÑ üòÅ üòÜ üòÖ üòÇ ü§£ ü•≤ ‚ò∫Ô∏è üòä üòá üôÇ üôÉ üòâ üòå üòç ü•∞ üòò üòó üòô üòö üòã üòõ üòù üòú ü§™ ü§® üßê ü§ì üòé ü•∏ ü§© ü•≥ üòè üòí üòû üòî üòü üòï üôÅ ‚òπÔ∏è üò£ üòñ üò´ üò© ü•∫ üò¢ üò≠ üò§ üò† üò° ü§¨ ü§Ø üò≥ ü•µ"
                        )
                )
            }
            NotificationType.CUSTOM -> {
                notifiactionBuilder
                    .setStyle(NotificationCompat.DecoratedCustomViewStyle())
                    .setCustomContentView(
                        RemoteViews(
                            packageName,
                            R.layout.view_custom_notification
                        ).apply {
                            setTextViewText(R.id.title, title)
                            setTextViewText(R.id.message, message)
                        }
                    )
            }
        }

        return notifiactionBuilder.build()
    }

    companion object {
        private const val CHANNEL_NAME = "Emoji Party"
        private const val CHANNEL_DESCRIPTION = "Emoji PartyÎ•º ÏúÑÌïú Ï±ÑÎÑê"
        private const val CHANNEL_ID = "Channel id"
    }
}